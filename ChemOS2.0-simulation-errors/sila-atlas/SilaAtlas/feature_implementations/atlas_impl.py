# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.atlas import AtlasBase, Recommend_IntermediateResponses, Recommend_Responses

if TYPE_CHECKING:
    from ..server import Server


from sila2.server import MetadataDict
from sila2.server import ObservableCommandInstanceWithIntermediateResponses

from ..generated.atlas import AtlasBase
from ..generated.atlas import Recommend_IntermediateResponses
from ..generated.atlas import Recommend_Responses
from olympus import Campaign
from olympus.campaigns import ParameterSpace

from atlas.optimizers.gp import BoTorchPlanner
from atlas.optimizers.tanimoto import TanimotoPlanner
from atlas.optimizers.params import ParameterCategorical, ParameterContinuous
import resource
import sys
import pickle
import uuid
import time
import os

class AtlasImpl(AtlasBase):
    def __init__(self, parent_server: Server) -> None:
        self.status = 'free'
        super().__init__(parent_server=parent_server)

    def get_Status(self, *, metadata: MetadataDict) -> str:
        
        return self.status

    def Recommend(
        self,
        Campaign: bytes,
        Config: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Recommend_IntermediateResponses],
    ) -> Recommend_Responses:
        dummybinary = "dummy".encode("utf-8")
        campaignfile = os.path.join("campaigns", f"{str(uuid.uuid1())}.pkl")

        

        if self.status =='busy':
            return Recommend_Responses('Atlas is currently busy. try again later')

        self.status = 'busy'

        instance.begin_execution() 

        time.sleep(3)

        instance.send_intermediate_response(Recommend_IntermediateResponses('campaign_file', dummybinary, campaignfile))

        try:
            config = eval(Config)
            with open(campaignfile, "wb") as f:
                f.write(Campaign)
    
        except:
            self.status = 'free'
            instance.send_intermediate_response(Recommend_IntermediateResponses(Status='Error Reading input data', BinaryPayload=dummybinary,StringPayload= "."))
            return Recommend_Responses('Error reading inputs.')

    # try:
        with open(campaignfile, "rb") as f:
            campaign = pickle.load(f)
        
        if "planner" in config:
            
            if config["planner"] == "tanimoto":
                value_space = ParameterSpace()
                for i in range(len(config["moos"])):
                    value_space.add(ParameterContinuous(name=f'objective {i}'))
                planner = TanimotoPlanner(
                    goal=config["goal"],
                    init_design_strategy='random',
                    num_init_design=1,
                    batch_size=1,
                    use_descriptors=True,
                    acquisition_optimizer_kind='genetic',
                    is_moo=True,
                    scalarizer_kind='Hypervolume', 
                    value_space=value_space,
                    goals=config["moos"],   
                )
                planner.param_space = campaign.param_space
                planner._set_param_space(campaign.param_space)
                instance.send_intermediate_response(Recommend_IntermediateResponses(Status='Using Tanimoto planner', BinaryPayload=dummybinary,StringPayload= "."))

        else:
            planner = BoTorchPlanner(
                goal=config['goal'],
                init_design_strategy="random",
                num_init_design=config['num_init_design'],
                acquisition_type=config["acquisition_type"], 
                acquisition_optimizer_kind=config["acquisition_optimizer_kind"],  # gradient, genetic
                batch_size=1
            )

            planner.has_descriptors = False

        
            planner.param_space = campaign.param_space
            planner._set_param_space(campaign.param_space)
            instance.send_intermediate_response(Recommend_IntermediateResponses(Status='Using Botorch Planner', BinaryPayload=dummybinary,StringPayload= "."))

        instance.send_intermediate_response(Recommend_IntermediateResponses('Beginning Optimization', dummybinary, '.'))

        # try:
        sample = planner.recommend(campaign.observations)[0]
        sampleslist = sample.to_list()
        # except:
        #     self.status = 'free'
        #     instance.send_intermediate_response(Recommend_IntermediateResponses(Status='Error running atlas', BinaryPayload=dummybinary,StringPayload= "."))
        # self.status = 'free'

        with open(campaignfile, "wb") as f:
            pickle.dump(campaign, f)
        
        with open(campaignfile, "rb") as f:
            campaigndata = f.read()

        try:

            instance.send_intermediate_response(Recommend_IntermediateResponses(Status='reccomended params', BinaryPayload=campaigndata, StringPayload=str(sampleslist)))

            
        except:
            self.status = 'free'
            instance.send_intermediate_response(Recommend_IntermediateResponses(Status='Error Sending Return data', BinaryPayload=dummybinary,StringPayload= "."))
        self.status = 'free'


        return Recommend_Responses("success")