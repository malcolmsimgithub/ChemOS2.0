# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .atlas_types import Recommend_IntermediateResponses, Recommend_Responses

if TYPE_CHECKING:
    from ...server import Server


class AtlasBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        A Sila_server for Atlas

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_Status(self, *, metadata: MetadataDict) -> str:
        """
        Indicates the status of Atlas

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Indicates the status of Atlas
        """
        pass

    @abstractmethod
    def Recommend(
        self,
        Campaign: bytes,
        Config: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Recommend_IntermediateResponses],
    ) -> Recommend_Responses:
        """
        get recommendation from Atlas


        :param Campaign: Olympus Campaign Object

        :param Config: Configuration for the optimizer

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
