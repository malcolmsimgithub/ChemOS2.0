
# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.hplcmssimulator import (
    BlankRun_IntermediateResponses,
    BlankRun_Responses,
    HPLCMSsimulatorBase,
    Status_Responses,
    SubmitJobChemspeed_IntermediateResponses,
    SubmitJobChemspeed_Responses,
    ValveStatus_Responses,
)

if TYPE_CHECKING:
    from ..server import Server

from pathlib import Path
import socket
import os 
import shutil
import pickle
from datetime import date
import time
import json


filepath = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
INPUT = os.path.abspath("communication/jobs_submitted/")
OUTPUT = os.path.abspath("communication/jobs_submitted/")
STATUS = os.path.abspath("communication/HPLCMS_status/HPLCMS_status.txt")  
IP = "127.0.0.1"
PORT = 65011
USERNAME = "sila_server"
HEADER_LENGTH = 10

today = date.today()
today_formatted = today.strftime("%Y%m%d")


from .utils import run_chemspeed_client, run_blank_client

class HPLCMSsimulatorImpl(HPLCMSsimulatorBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def Status(self, *, metadata: MetadataDict) -> Status_Responses:
        with open(STATUS, "r") as f:
            return f.read()

    def ValveStatus(self, Purpose: str, StatusUpdate: str, *, metadata: MetadataDict) -> ValveStatus_Responses:
        return "free"

    
    def BlankRun(
        self,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[BlankRun_IntermediateResponses],
    ) -> BlankRun_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        instance.begin_execution()  # set execution status from `waiting` to `running`

        injection = {"blank":True}
        jobname = "blank_run"


        timestamp = time.strftime("%y-%m-%d-%H-%M", time.localtime())
        injection["name"] = jobname + timestamp 


        jobfile = os.path.join(INPUT, (jobname+".json"))
        outputfile = f"{OUTPUT}/{injection['name']}.json"

        #connect to socket
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((IP, PORT))
        client_socket.setblocking(False)
        username = USERNAME.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)
        bindata = str.encode("test")

        #submit job to HPLCMS
        with open(jobfile, 'w') as f:
            json.dump(injection, f)

        instance.send_intermediate_response(BlankRun_IntermediateResponses(Data=f"beginning job {injection['name']}", Payload=bindata))

        return BlankRun_Responses(run_blank_client(client_socket, instance, outputfile, injection["name"]))



    def SubmitJobChemspeed(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJobChemspeed_IntermediateResponses],
    ) -> SubmitJobChemspeed_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`

        injection = eval(JobFile)
        jobname = injection["name"]


        timestamp = time.strftime("%y-%m-%d-%H-%M", time.localtime())
        injection["name"] = jobname + timestamp 


        jobfile = os.path.join(INPUT, (jobname+".json"))
        outputfile = f"{OUTPUT}/{injection['name']}.json"

        #connect to socket
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((IP, PORT))
        client_socket.setblocking(False)
        username = USERNAME.encode('utf-8')
        username_header = f"{len(username):<{HEADER_LENGTH}}".encode('utf-8')
        client_socket.send(username_header + username)
        bindata = str.encode("test")

        #submit job to HPLCMS
        with open(jobfile, 'w') as f:
            json.dump(injection, f)

        instance.send_intermediate_response(SubmitJobChemspeed_IntermediateResponses(Data=f"beginning job {injection['name']}", Payload=bindata))

        return SubmitJobChemspeed_Responses(run_chemspeed_client(client_socket, instance, outputfile, injection["name"]))