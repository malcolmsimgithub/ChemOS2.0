# Generated by sila2.code_generator; sila2.__version__: 0.10.1
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), so this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from chemspeedoperator_types import (
        Addbatch_IntermediateResponses,
        Addbatch_Responses,
        ChangeProcedure_Responses,
        Filter_IntermediateResponses,
        Filter_Responses,
        GetInventory_Responses,
        GetRackpositions_Responses,
        Inject_IntermediateResponses,
        Inject_Responses,
    )
    from sila2.client import ClientMetadataInstance, ClientObservableCommandInstanceWithIntermediateResponses


class ChemSpeedOperatorClient:
    """

    Runs the ChemSpeed platform using a given synthesis procedure

    """

    def ChangeProcedure(
        self, SynthesisProcedure: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ChangeProcedure_Responses:
        """
        Changes the synthesis procedure
        """
        ...

    def GetRackpositions(
        self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetRackpositions_Responses:
        """
        Retreives storage rack information form chemspeed
        """
        ...

    def GetInventory(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> GetInventory_Responses:
        """
        Retreives inventory information from ChemSpeed
        """
        ...

    def Addbatch(
        self, BatchName: str, Batchfile: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[Addbatch_IntermediateResponses, Addbatch_Responses]:
        """
        Adds a batch for the chemspeed platform to make
        """
        ...

    def Filter(
        self, RackPosition: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[Filter_IntermediateResponses, Filter_Responses]:
        """
        Instructs ChemSpeed to filter a compound
        """
        ...

    def Inject(
        self, RackPosition: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[Inject_IntermediateResponses, Inject_Responses]:
        """
        Tells Chemspeed to inject to HPLC
        """
        ...
