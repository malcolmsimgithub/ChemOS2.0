# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .chemspeedoperator_types import (
    Addbatch_IntermediateResponses,
    Addbatch_Responses,
    ChangeProcedure_Responses,
    Filter_IntermediateResponses,
    Filter_Responses,
    GetInventory_Responses,
    GetRackpositions_Responses,
    Inject_IntermediateResponses,
    Inject_Responses,
)

if TYPE_CHECKING:
    from ...server import Server


class ChemSpeedOperatorBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Runs the ChemSpeed platform using a given synthesis procedure

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def ChangeProcedure(self, SynthesisProcedure: str, *, metadata: MetadataDict) -> ChangeProcedure_Responses:
        """
        Changes the synthesis procedure


        :param SynthesisProcedure: Synthesis procedure to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def GetRackpositions(self, *, metadata: MetadataDict) -> GetRackpositions_Responses:
        """
        Retreives storage rack information form chemspeed


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message

            - RACKL: RACKL

            - RACKR: RACKR

            - SPE: SPE


        """
        pass

    @abstractmethod
    def GetInventory(self, *, metadata: MetadataDict) -> GetInventory_Responses:
        """
        Retreives inventory information from ChemSpeed


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Addbatch(
        self,
        BatchName: str,
        Batchfile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Addbatch_IntermediateResponses],
    ) -> Addbatch_Responses:
        """
         Adds a batch for the chemspeed platform to make


        :param BatchName: Name of batchfile to use

        :param Batchfile: Batch file to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Filter(
        self,
        RackPosition: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Filter_IntermediateResponses],
    ) -> Filter_Responses:
        """
        Instructs ChemSpeed to filter a compound


        :param RackPosition: Position of compound on RackL

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def Inject(
        self,
        RackPosition: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Inject_IntermediateResponses],
    ) -> Inject_Responses:
        """
        Tells Chemspeed to inject to HPLC


        :param RackPosition: Location of compound

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
