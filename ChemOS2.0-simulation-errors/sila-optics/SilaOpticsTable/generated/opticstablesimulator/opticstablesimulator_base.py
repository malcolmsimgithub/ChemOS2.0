# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .opticstablesimulator_types import Status_Responses, SubmitJob_IntermediateResponses, SubmitJob_Responses

if TYPE_CHECKING:
    from ...server import Server


class OpticsTableSimulatorBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Simulates the optics table platform

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def Status(self, *, metadata: MetadataDict) -> Status_Responses:
        """
        Gets the Status of the optics table


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Termination: Termination message


        """
        pass

    @abstractmethod
    def SubmitJob(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[SubmitJob_IntermediateResponses],
    ) -> SubmitJob_Responses:
        """
         Submits a Job for the OpticsTableSimulator to do


        :param JobFile: Job file to use in this experiment.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Termination: Termination message


        """
        pass
