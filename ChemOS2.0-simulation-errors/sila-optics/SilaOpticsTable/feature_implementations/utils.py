
# Generated by sila2.code_generator; sila2.__version__: 0.10.1
# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations
import time

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses
import json
from ..generated.opticstablesimulator import (
    OpticsTableSimulatorBase,
    Status_Responses,
    SubmitJob_IntermediateResponses,
    SubmitJob_Responses,
)

from pathlib import Path
import os
import errno
import sys
import shutil
import json
import socket
if TYPE_CHECKING:
    from ..server import Server


import subprocess


HEADER_LENGTH = 10
OUTPUT: Path = Path(os.path.abspath("output_folder"))
DUMMY = os.path.abspath("simulator_storage/dummy.7z")

def isbusy():
    statusfile = os.path.join(OUTPUT, "status.txt")
    with open(statusfile, "r") as f:
        status = f.read()
    if status == "active":
        return True
    elif status == "inactive":
        return False
    else:
        raise ValueError

def run_optics_table_client(client_socket, instance, jobname):

    endfilename = os.path.abspath(f"completed_folder/{jobname}.json")
    outputdir = os.path.abspath(f"output_folder/{jobname}")

    while True:
        try:
            # Now we want to loop over received messages (there might be more than one) and print them
            while True:

                # Receive our "header" containing username length, it's size is defined and constant
                username_header = client_socket.recv(HEADER_LENGTH)

                # If we received no data, server gracefully closed a connection, for example using socket.close() or socket.shutdown(socket.SHUT_RDWR)
                if not len(username_header):
                    print('Connection closed by the server')
                    sys.exit()

                # Convert header to int value
                username_length = int(username_header.decode('utf-8').strip())

                # Receive and decode username
                username = client_socket.recv(username_length).decode('utf-8')

                # Now do the same for message (as we received username, we received whole message, there's no need to check if it has any length)
                message_header = client_socket.recv(HEADER_LENGTH)
                message_length = int(message_header.decode('utf-8').strip())
                message = client_socket.recv(message_length).decode('utf-8')

                bindata = str.encode("test")

                # Print message
                print(f'{username} > {message}')
                instance.send_intermediate_response(SubmitJob_IntermediateResponses(message, bindata))
                if os.path.isfile(endfilename):     
                    instance.send_intermediate_response(SubmitJob_IntermediateResponses('sending output data...', bindata))
                    time.sleep(10)

                    shutil.copyfile(DUMMY, os.path.join(OUTPUT, f"{jobname}.7z"))
           
                    with open(os.path.join(OUTPUT, f"{jobname}.7z"), "rb") as f:
                        data =f.read()

                    instance.send_intermediate_response(SubmitJob_IntermediateResponses('output_data', data))
                    #wait for data to send
                    time.sleep(20)
                    return "characterization complete"
                elif message == "optics-table_lost":
                    return   "optics-table_lost"

            

        except IOError as e:
            # This is normal on non blocking connections - when there are no incoming data error is going to be raised
            # Some operating systems will indicate that using AGAIN, and some using WOULDBLOCK error code
            # We are going to check for both - if one of them - that's expected, means no incoming data, continue as normal
            # If we got different error code - something happened
            if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:
                print('Reading error: {}'.format(str(e)))
                sys.exit()

            # We just did not receive anything
            continue

        except Exception as e:
            # Any other exception - something happened, exit
            print('Reading error: '.format(str(e)))
            sys.exit()

